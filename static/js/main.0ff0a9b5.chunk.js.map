{"version":3,"sources":["logo.svg","containers/metrochart.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MetroChart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","cities","data","map","element","city","operational_kms","under_construction_kms","planned_kms","labels","datasets","label","backgroundColor","Array","length","fill","borderColor","borderWidth","options","scales","yAxes","ticks","beginAtZero","fontColor","themecolor","fontSize","scaleLabel","labelString","display","lineHeight","gridLines","zeroLineColor","zeroLineWidth","xAxes","maintainAspectRation","legend","position","title","text","fontFamily","react_default","a","createElement","class","es","Component","App","Container","fluid","Header","as","textAlign","color","size","metrochart","MetroData","MetroCitiesData","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0ff0a9b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\n// import { Container } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nimport {Bar} from 'react-chartjs-2';\r\nimport '../index.css'\r\n\r\n\r\nclass MetroChart extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.cities = this.props.data.map(element => element.city);\r\n        this.operational_kms = this.props.data.map(element => element.operational_kms);\r\n        this.under_construction_kms = this.props.data.map(element => element.under_construction_kms);\r\n        this.planned_kms = this.props.data.map(element => element.planned_kms)\r\n    }\r\n\r\n    render() {\r\n        let data =  {\r\n            labels: this.cities,\r\n            datasets: [{\r\n                label: \"Operational\",\r\n                data: this.operational_kms,\r\n                backgroundColor: Array(this.cities.length).fill('rgba(25, 199, 132, 0.8)'),\r\n                borderColor: Array(this.cities.length).fill('rgba(125, 199, 132, 1)'),\r\n                borderWidth: 2\r\n            }, {\r\n                label: \"Under Construction\",\r\n                data: this.under_construction_kms,\r\n                backgroundColor: Array(this.cities.length).fill('rgba(55, 239, 32, 0.6)'),\r\n                borderColor: Array(this.cities.length).fill('rgba(55, 199, 132, 1)'),\r\n                borderWidth: 2\r\n            }, {\r\n                label: \"Planned\",\r\n                data: this.planned_kms,\r\n                backgroundColor: Array(this.cities.length).fill('rgba(55, 179, 232, 0.4)'),\r\n                borderColor: Array(this.cities.length).fill('rgba(55, 129, 182, 1)'),\r\n                borderWidth: 2\r\n            }]\r\n        }\r\n        \r\n        let options = {\r\n            scales: {\r\n                yAxes: [{\r\n                    ticks: {\r\n                        beginAtZero: true,\r\n                        fontColor : this.props.themecolor,\r\n                        fontSize : 16,\r\n                    },\r\n                    scaleLabel : {\r\n                        labelString: \"System Length (km)\",\r\n                        display : true,\r\n                        lineHeight : 2.4,\r\n                        fontColor : this.props.themecolor,\r\n                        fontSize : 20,\r\n                    },\r\n                    gridLines : {\r\n                        zeroLineColor : this.props.themecolor,\r\n                        zeroLineWidth : 2,\r\n                    }\r\n                }],\r\n                xAxes: [{\r\n                    ticks: {\r\n                        fontColor : this.props.themecolor,\r\n                        fontSize : 16,\r\n                    },\r\n                    gridLines : {\r\n                        zeroLineColor : this.props.themecolor,\r\n                    },\r\n                }]\r\n            },\r\n            maintainAspectRation : true,\r\n            legend : {\r\n                position : 'bottom',\r\n                labels : {\r\n                    fontSize : 18,\r\n                    fontColor : this.props.themecolor,\r\n                }\r\n            },\r\n            title : {\r\n                position : 'top',\r\n                text : this.props.title,\r\n                fontSize : 20,\r\n                display : true,\r\n                fontColor : this.props.themecolor,\r\n                fontFamily : 'Helvetica',\r\n            },\r\n        }\r\n      \r\n        return <div class='metro-chart'>\r\n            <Bar data={data} options={options} />\r\n            </div>\r\n    }\r\n}\r\n\r\nexport default MetroChart;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Container, Header, Grid } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css';\n\nimport MetroChart from './containers/metrochart.js'\n\nimport MetroData from './data/metro.json'\nimport MetroCitiesData from './data/metro-cities.json'\n\nclass App extends Component {\n    render() {\n        return <Container fluid>\n            <div class='page-title'>\n                <Header as='h1' textAlign='center' color='teal' size='huge'>Metro Systems In India</Header>\n            </div>\n            <MetroChart data={MetroData} themecolor='rgba(30,128,128, 1)' title='Tier I Cities'/>\n            <MetroChart data={MetroCitiesData} themecolor='rgba(128, 98, 98, 1)' title='Tier II Cities'/>\n            <div class='page-footer'>\n                <Header textAlign='center' color='brown' size='tiny'>Last Updated on March 21, 2019</Header>\n            </div>\n        </Container>\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}